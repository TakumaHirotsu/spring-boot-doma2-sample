package [[${repositoryPackageName}]].[[${subSystem}]];

import static com.sample.domain.util.DomaUtils.createSelectOptions;
import static java.util.stream.Collectors.toList;

import [[${daoPackageName}]].[[${subSystem}]].[[${upperFuncName}]]Dao;
import [[${dtoPackageName}]].[[${subSystem}]].[[${upperFuncName}]];
import [[${dtoPackageName}]].[[${subSystem}]].[[${upperFuncName}]]Criteria;
import com.sample.domain.exception.NoDataFoundException;
import java.util.List;
import java.util.Optional;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.val;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;

/**
 * [[${funcStr}]]リポジトリ
 */
@RequiredArgsConstructor
@Repository
public class [[${upperFuncName}]]Repository {

    @NonNull final [[${upperFuncName}]]Dao [[${lowerFuncName}]]Dao;

    /**
     * [[${funcStr}]]を複数取得します。
     *
     * @param criteria
     * @param pageable
     * @return
     */
    public Page<[[${upperFuncName}]]> findAll([[${upperFuncName}]]Criteria criteria, Pageable pageable) {
        val options = createSelectOptions(pageable).count();
        val data = [[${lowerFuncName}]]Dao.selectAll(criteria, options, toList());
        return new PageImpl<>(data, pageable, options.getCount());
    }

    /**
     * [[${funcStr}]]を取得します。
     *
     * @param criteria
     * @return
     */
    public Optional<[[${upperFuncName}]]> findOne([[${upperFuncName}]]Criteria criteria) {
        // 1件取得
        return [[${lowerFuncName}]]Dao.select(criteria);
    }

    /**
     * [[${funcStr}]]を取得します。
     *
     * @return
     */
    public [[${upperFuncName}]] findById(final Long id) {
        // 1件取得
        return [[${lowerFuncName}]]Dao.selectById(id)
                .orElseThrow(() -> new NoDataFoundException("[[${lowerFuncName}]]_id=" + id + " のデータが見つかりません。"));
    }

    /**
     * [[${funcStr}]]を追加します。
     *
     * @param input[[${upperFuncName}]]
     * @return
     */
    public [[${upperFuncName}]] create(final [[${upperFuncName}]] input[[${upperFuncName}]]) {
        // 1件登録
        [[${lowerFuncName}]]Dao.insert(input[[${upperFuncName}]]);

        return input[[${upperFuncName}]];
    }

    /**
     * [[${funcStr}]]を更新します。
     *
     * @param input[[${upperFuncName}]]
     * @return
     */
    public [[${upperFuncName}]] update(final [[${upperFuncName}]] input[[${upperFuncName}]]) {
        // 1件更新
        int updated = [[${lowerFuncName}]]Dao.update(input[[${upperFuncName}]]);

        if (updated < 1) {
            throw new NoDataFoundException("[[${lowerFuncName}]]_id=" + input[[${upperFuncName}]].getId() + " のデータが見つかりません。");
        }

        return input[[${upperFuncName}]];
    }

    /**
     * [[${funcStr}]]を論理削除します。
     *
     * @return
     */
    public [[${upperFuncName}]] delete(final Long id) {
        val [[${lowerFuncName}]] = [[${lowerFuncName}]]Dao.selectById(id)
                .orElseThrow(() -> new NoDataFoundException("[[${lowerFuncName}]]_id=" + id + " のデータが見つかりません。"));

        int updated = [[${lowerFuncName}]]Dao.delete([[${lowerFuncName}]]);

        if (updated < 1) {
            throw new NoDataFoundException("[[${lowerFuncName}]]_id=" + id + " は更新できませんでした。");
        }

        return [[${lowerFuncName}]];
    }
}
