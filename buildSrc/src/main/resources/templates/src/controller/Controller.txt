package [[${controllerPackageName}]].[[${lowerPhysicalFunctionName}]];

import static com.bigtreetc.sample.common.util.ValidateUtils.isTrue;
import static com.bigtreetc.sample.common.util.ValidateUtils.isTrue;
import static com.bigtreetc.sample.domain.util.TypeUtils.toListType;
import static [[${webBasePackageName}]].WebConst.*;

import [[${dtoPackageName}]].[[${camelPhysicalFunctionName}]];
import [[${dtoPackageName}]].[[${camelPhysicalFunctionName}]]Criteria;
import [[${servicePackageName}]].[[${lowerPhysicalFunctionName}]].[[${camelPhysicalFunctionName}]]Service;
import [[${baseControllerPackageName}]].AbstractHtmlController;
import [[${webBasePackageName}]].view.CsvView;
import java.util.List;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import org.springframework.data.domain.Pageable;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

/** [[${logicalFunctionName}]] */
@RequiredArgsConstructor
@Controller
@RequestMapping("/[[${lowerPhysicalMultiFunctionName}]]")
@SessionAttributes(types = { Search[[${camelPhysicalFunctionName}]]Form.class, [[${camelPhysicalFunctionName}]]Form.class })
@Slf4j
public class [[${camelPhysicalFunctionName}]]Controller extends AbstractHtmlController {

    @NonNull final [[${camelPhysicalFunctionName}]]FormValidator [[${lowerPhysicalFunctionName}]]FormValidator;

    @NonNull final [[${camelPhysicalFunctionName}]]Service [[${lowerPhysicalFunctionName}]]Service;

    @ModelAttribute("[[${lowerPhysicalFunctionName}]]Form")
    public [[${camelPhysicalFunctionName}]]Form [[${lowerPhysicalFunctionName}]]Form() {
        return new [[${camelPhysicalFunctionName}]]Form();
    }

    @ModelAttribute("search[[${camelPhysicalFunctionName}]]Form")
    public Search[[${camelPhysicalFunctionName}]]Form search[[${camelPhysicalFunctionName}]]Form() {
        return new Search[[${camelPhysicalFunctionName}]]Form();
    }

    @InitBinder("[[${lowerPhysicalFunctionName}]]Form")
    public void validatorBinder(WebDataBinder binder) {
        binder.addValidators([[${lowerPhysicalFunctionName}]]FormValidator);
    }

    @Override
    public String getFunctionName() {
        return "A_[[${upperPhysicalFunctionName}]]";
    }

    /**
     * 登録画面 初期表示
     *
     * @param form
     * @param model
     * @return
     */
    @PreAuthorize("hasAuthority('[[${lowerPhysicalFunctionName}]]:save')")
    @GetMapping("/new")
    public String new[[${camelPhysicalFunctionName}]](@ModelAttribute("[[${lowerPhysicalFunctionName}]]Form") [[${camelPhysicalFunctionName}]]Form form, Model model) {
        if (!form.isNew()) {
            // SessionAttributeに残っている場合は再生成する
            model.addAttribute("[[${lowerPhysicalFunctionName}]]Form", new [[${camelPhysicalFunctionName}]]Form());
        }

        return "modules/[[${lowerPhysicalFunctionName}]]/new";
    }

    /**
     * 登録処理
     *
     * @param form
     * @param br
     * @param attributes
     * @return
     */
    @PreAuthorize("hasAuthority('[[${lowerPhysicalFunctionName}]]:save')")
    @PostMapping("/new")
    public String new[[${camelPhysicalFunctionName}]](
         @Validated @ModelAttribute("[[${lowerPhysicalFunctionName}]]Form") [[${camelPhysicalFunctionName}]]Form form,
         BindingResult br,
         RedirectAttributes attributes) {
        // 入力チェックエラーがある場合は、元の画面にもどる
        if (br.hasErrors()) {
            setFlashAttributeErrors(attributes, br);
            return "redirect:/[[${lowerPhysicalMultiFunctionName}]]/new";
        }

        // 入力値からDTOを作成する
        val input[[${camelPhysicalFunctionName}]] = modelMapper.map(form, [[${camelPhysicalFunctionName}]].class);

        // 登録する
        val created[[${camelPhysicalFunctionName}]] = [[${lowerPhysicalFunctionName}]]Service.create(input[[${camelPhysicalFunctionName}]]);

        // 登録成功メッセージ
        attributes.addFlashAttribute(SUCCESS_MESSAGE, getMessage(MESSAGE_CREATED));

        return "redirect:/[[${lowerPhysicalMultiFunctionName}]]/show/" + created[[${camelPhysicalFunctionName}]].getId();
    }

    /**
     * 一覧画面 初期表示
     *
     * @param model
     * @return
     */
    @PreAuthorize("hasAuthority('[[${lowerPhysicalFunctionName}]]:read')")
    @GetMapping("/find")
    public String find[[${camelPhysicalFunctionName}]](
         @ModelAttribute("search[[${camelPhysicalFunctionName}]]Form") Search[[${camelPhysicalFunctionName}]]Form form,
         @RequestParam(name = "init", required = false) Boolean init,
         Pageable pageable,
         Model model) {
        // 検索条件の初期化
        if (isTrue(init)) {
          form = new Search[[${camelPhysicalFunctionName}]]Form();
          model.addAttribute("search[[${camelPhysicalFunctionName}]]Form", form);
        }

        // 入力値から検索条件を作成する
        val criteria = modelMapper.map(form, [[${camelPhysicalFunctionName}]]Criteria.class);

        // 10件区切りで取得する
        val pages = [[${lowerPhysicalFunctionName}]]Service.findAll(criteria, pageable);

        // 画面に検索結果を渡す
        model.addAttribute("pages", pages);

        return "modules/[[${lowerPhysicalFunctionName}]]/find";
    }

    /**
     * 検索結果
     *
     * @param form
     * @param br
     * @param attributes
     * @return
     */
    @PreAuthorize("hasAuthority('[[${lowerPhysicalFunctionName}]]:read')")
    @PostMapping("/find")
    public String find[[${camelPhysicalFunctionName}]](
         @Validated @ModelAttribute("search[[${camelPhysicalFunctionName}]]Form") Search[[${camelPhysicalFunctionName}]]Form form,
         BindingResult br,
         RedirectAttributes attributes) {
        // 入力チェックエラーがある場合は、元の画面にもどる
        if (br.hasErrors()) {
            setFlashAttributeErrors(attributes, br);
            return "redirect:/[[${lowerPhysicalMultiFunctionName}]]/find";
        }

        return "redirect:/[[${lowerPhysicalMultiFunctionName}]]/find";
    }

    /**
     * 詳細画面
     *
     * @param [[${lowerPhysicalFunctionName}]]Id
     * @param model
     * @return
     */
    @GetMapping("/show/{[[${lowerPhysicalFunctionName}]]Id}")
    public String show[[${camelPhysicalFunctionName}]](@PathVariable Long [[${lowerPhysicalFunctionName}]]Id, Model model) {
        // 1件取得する
        val [[${lowerPhysicalFunctionName}]] = [[${lowerPhysicalFunctionName}]]Service.findById([[${lowerPhysicalFunctionName}]]Id);
        model.addAttribute("[[${lowerPhysicalFunctionName}]]", [[${lowerPhysicalFunctionName}]]);
        return "modules/[[${lowerPhysicalFunctionName}]]/show";
    }

    /**
     * 編集画面 初期表示
     *
     * @param [[${lowerPhysicalFunctionName}]]Id
     * @param form
     * @param model
     * @return
     */
    @GetMapping("/edit/{[[${lowerPhysicalFunctionName}]]Id}")
    public String edit[[${camelPhysicalFunctionName}]](
         @PathVariable Long [[${lowerPhysicalFunctionName}]]Id, @ModelAttribute("[[${lowerPhysicalFunctionName}]]Form") [[${camelPhysicalFunctionName}]]Form form, Model model) {
        // セッションから取得できる場合は、読み込み直さない
        if (!hasErrors(model)) {
            // 1件取得する
            val [[${lowerPhysicalFunctionName}]] = [[${lowerPhysicalFunctionName}]]Service.findById([[${lowerPhysicalFunctionName}]]Id);

            // 取得したDtoをFromに詰め替える
            modelMapper.map([[${lowerPhysicalFunctionName}]], form);
        }

        return "modules/[[${lowerPhysicalFunctionName}]]/new";
    }

    /**
     * 編集画面 更新処理
     *
     * @param form
     * @param br
     * @param [[${lowerPhysicalFunctionName}]]Id
     * @param sessionStatus
     * @param attributes
     * @return
     */
    @PreAuthorize("hasAuthority('[[${lowerPhysicalFunctionName}]]:save')")
    @PostMapping("/edit/{[[${lowerPhysicalFunctionName}]]Id}")
    public String edit[[${camelPhysicalFunctionName}]](
         @Validated @ModelAttribute("[[${lowerPhysicalFunctionName}]]Form") [[${camelPhysicalFunctionName}]]Form form,
         BindingResult br,
         @PathVariable Long [[${lowerPhysicalFunctionName}]]Id,
         SessionStatus sessionStatus,
         RedirectAttributes attributes) {
        // 入力チェックエラーがある場合は、元の画面にもどる
        if (br.hasErrors()) {
            setFlashAttributeErrors(attributes, br);
            return "redirect:/[[${lowerPhysicalMultiFunctionName}]]/edit/" + [[${lowerPhysicalFunctionName}]]Id;
        }

        // 更新対象を取得する
        val [[${lowerPhysicalFunctionName}]] = [[${lowerPhysicalFunctionName}]]Service.findById([[${lowerPhysicalFunctionName}]]Id);

        // 入力値を詰め替える
        modelMapper.map(form, [[${lowerPhysicalFunctionName}]]);

        // 更新する
        val updated[[${camelPhysicalFunctionName}]] = [[${lowerPhysicalFunctionName}]]Service.update([[${lowerPhysicalFunctionName}]]);

        // セッションのFormをクリアする
        sessionStatus.setComplete();

        // 更新成功メッセージ
        attributes.addFlashAttribute(SUCCESS_MESSAGE, getMessage(MESSAGE_UPDATED));

        return "redirect:/[[${lowerPhysicalMultiFunctionName}]]/show/" + updated[[${camelPhysicalFunctionName}]].getId();
    }

    /**
     * 削除処理
     *
     * @param [[${lowerPhysicalFunctionName}]]Id
     * @param attributes
     * @return
     */
    @PreAuthorize("hasAuthority('[[${lowerPhysicalFunctionName}]]:save')")
    @PostMapping("/remove/{[[${lowerPhysicalFunctionName}]]Id}")
    public String remove[[${camelPhysicalFunctionName}]](@PathVariable Long [[${lowerPhysicalFunctionName}]]Id, RedirectAttributes attributes) {
        // 論理削除する
        [[${lowerPhysicalFunctionName}]]Service.delete([[${lowerPhysicalFunctionName}]]Id);

        // 削除成功メッセージ
        attributes.addFlashAttribute(SUCCESS_MESSAGE, getMessage(MESSAGE_DELETED));

        return "redirect:/[[${lowerPhysicalMultiFunctionName}]]/find";
    }

    /**
     * CSVダウンロード
     *
     * @param filename
     * @param form
     * @return
     */
    @PreAuthorize("hasAuthority('[[${lowerPhysicalFunctionName}]]:read')")
    @GetMapping("/download/{filename:.+\\.csv}")
    public ModelAndView downloadCsv(@PathVariable String filename, @ModelAttribute("search[[${camelPhysicalFunctionName}]]Form") Search[[${camelPhysicalFunctionName}]]Form form) {
        // 入力値から検索条件を作成する
        val criteria = modelMapper.map(form, [[${camelPhysicalFunctionName}]]Criteria.class);

        // 全件取得する
        val [[${lowerPhysicalMultiFunctionName}]] = [[${lowerPhysicalFunctionName}]]Service.findAll(criteria, Pageable.unpaged());

        // 詰め替える
        List<[[${camelPhysicalFunctionName}]]Csv> csvList = modelMapper.map([[${lowerPhysicalMultiFunctionName}]].getContent(), toListType([[${camelPhysicalFunctionName}]]Csv.class));

        // CSVスキーマクラス、データ、ダウンロード時のファイル名を指定する
        val view = new CsvView([[${camelPhysicalFunctionName}]]Csv.class, csvList, filename);

        return new ModelAndView(view);
    }
}
