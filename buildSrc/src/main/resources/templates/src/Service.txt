package [[${servicePackageName}]].[[${subSystem}]];

import [[${dtoPackageName}]].[[${subSystem}]].[[${upperFuncName}]];
import [[${dtoPackageName}]].[[${subSystem}]].[[${upperFuncName}]]Criteria;
import [[${repositoryPackageName}]].[[${subSystem}]].[[${upperFuncName}]]Repository;
import [[${commonServicePackageName}]].BaseTransactionalService;
import java.util.List;
import java.util.Optional;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.val;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

/** [[${funcStr}]]サービス */
@RequiredArgsConstructor
@Service
public class [[${upperFuncName}]]Service extends BaseTransactionalService {

    @NonNull final [[${upperFuncName}]]Repository [[${lowerFuncName}]]Repository;

    /**
     * [[${funcStr}]]を複数取得します。
     *
     * @param criteria
     * @param pageable
     * @return
     */
    @Transactional(readOnly = true) // 読み取りのみの場合は指定する
    public Page<[[${upperFuncName}]]> findAll([[${upperFuncName}]]Criteria criteria, Pageable pageable) {
        Assert.notNull(criteria, "criteria must not be null");
        return [[${lowerFuncName}]]Repository.findAll(criteria, pageable);
    }

    /**
     * [[${funcStr}]]を取得します。
     *
     * @return
     */
    @Transactional(readOnly = true)
    public Optional<[[${upperFuncName}]]> findOne([[${upperFuncName}]]Criteria criteria) {
        Assert.notNull(criteria, "criteria must not be null");
        return [[${lowerFuncName}]]Repository.findOne(criteria);
    }

    /**
     * [[${funcStr}]]を取得します。
     *
     * @return
     */
    @Transactional(readOnly = true)
    public [[${upperFuncName}]] findById(final Long id) {
        Assert.notNull(id, "id must not be null");
        return [[${lowerFuncName}]]Repository.findById(id);
    }

    /**
     * [[${funcStr}]]を追加します。
     *
     * @param input[[${upperFuncName}]]
     * @return
     */
    public [[${upperFuncName}]] create(final [[${upperFuncName}]] input[[${upperFuncName}]]) {
        Assert.notNull(input[[${upperFuncName}]], "input[[${upperFuncName}]] must not be null");
        return [[${lowerFuncName}]]Repository.create(input[[${upperFuncName}]]);
    }

    /**
     * [[${funcStr}]]を更新します。
     *
     * @param input[[${upperFuncName}]]
     * @return
     */
    public [[${upperFuncName}]] update(final [[${upperFuncName}]] input[[${upperFuncName}]]) {
        Assert.notNull(input[[${upperFuncName}]], "input[[${upperFuncName}]] must not be null");
        return [[${lowerFuncName}]]Repository.update(input[[${upperFuncName}]]);
    }

    /**
     * [[${funcStr}]]を論理削除します。
     *
     * @return
     */
    public [[${upperFuncName}]] delete(final Long id) {
        Assert.notNull(id, "id must not be null");
        return [[${lowerFuncName}]]Repository.delete(id);
    }
}
