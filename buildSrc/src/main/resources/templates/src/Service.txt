package [[${servicePackageName}]].[[${lowerPhysicalFunctionName}]];

import [[${dtoPackageName}]].[[${camelPhysicalFunctionName}]];
import [[${dtoPackageName}]].[[${camelPhysicalFunctionName}]]Criteria;
import [[${repositoryPackageName}]].[[${camelPhysicalFunctionName}]]Repository;
import [[${commonServicePackageName}]].BaseTransactionalService;
import com.bigtreetc.sample.domain.util.CsvUtils;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Optional;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.val;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

/** [[${logicalFunctionName}]]サービス */
@RequiredArgsConstructor
@Service
public class [[${camelPhysicalFunctionName}]]Service extends BaseTransactionalService {

  @NonNull final [[${camelPhysicalFunctionName}]]Repository [[${lowerPhysicalFunctionName}]]Repository;

  /**
   * [[${logicalFunctionName}]]を検索します。
   *
   * @param criteria
   * @param pageable
   * @return
   */
  @Transactional(readOnly = true) // 読み取りのみの場合は指定する
  public Page<[[${camelPhysicalFunctionName}]]> findAll([[${camelPhysicalFunctionName}]]Criteria criteria, Pageable pageable) {
    Assert.notNull(criteria, "criteria must not be null");
    return [[${lowerPhysicalFunctionName}]]Repository.findAll(criteria, pageable);
  }

  /**
   * [[${logicalFunctionName}]]を1件取得します。
   *
   * @return
   */
  @Transactional(readOnly = true)
  public Optional<[[${camelPhysicalFunctionName}]]> findOne([[${camelPhysicalFunctionName}]]Criteria criteria) {
    Assert.notNull(criteria, "criteria must not be null");
    return [[${lowerPhysicalFunctionName}]]Repository.findOne(criteria);
  }

  /**
   * [[${logicalFunctionName}]]を1件取得します。
   *
   * @return
   */
  @Transactional(readOnly = true)
  public [[${camelPhysicalFunctionName}]] findById(final Long id) {
    Assert.notNull(id, "id must not be null");
    return [[${lowerPhysicalFunctionName}]]Repository.findById(id);
  }

  /**
   * [[${logicalFunctionName}]]を追加します。
   *
   * @param input[[${camelPhysicalFunctionName}]]
   * @return
   */
  public [[${camelPhysicalFunctionName}]] create(final [[${camelPhysicalFunctionName}]] input[[${camelPhysicalFunctionName}]]) {
    Assert.notNull(input[[${camelPhysicalFunctionName}]], "input[[${camelPhysicalFunctionName}]] must not be null");
    return [[${lowerPhysicalFunctionName}]]Repository.create(input[[${camelPhysicalFunctionName}]]);
  }

  /**
   * [[${logicalFunctionName}]]を更新します。
   *
   * @param input[[${camelPhysicalFunctionName}]]
   * @return
   */
  public [[${camelPhysicalFunctionName}]] update(final [[${camelPhysicalFunctionName}]] input[[${camelPhysicalFunctionName}]]) {
    Assert.notNull(input[[${camelPhysicalFunctionName}]], "input[[${camelPhysicalFunctionName}]] must not be null");
    return [[${lowerPhysicalFunctionName}]]Repository.update(input[[${camelPhysicalFunctionName}]]);
  }

  /**
   * [[${logicalFunctionName}]]を論理削除します。
   *
   * @return
   */
  public [[${camelPhysicalFunctionName}]] delete(final Long id) {
    Assert.notNull(id, "id must not be null");
    return [[${lowerPhysicalFunctionName}]]Repository.delete(id);
  }

  /**
   * [[${logicalFunctionName}]]を書き出します。
   *
   * @param outputStream
   * @param
   * @return
   */
  @Transactional(readOnly = true) // 読み取りのみの場合は指定する
  public void writeToOutputStream(OutputStream outputStream, [[${camelPhysicalFunctionName}]]Criteria criteria, Class<?> clazz)
      throws IOException {
    Assert.notNull(criteria, "criteria must not be null");
    try (val data = [[${lowerPhysicalFunctionName}]]Repository.findAll(criteria)) {
      CsvUtils.writeCsv(outputStream, clazz, data, [[${lowerPhysicalFunctionName}]] -> modelMapper.map([[${lowerPhysicalFunctionName}]], clazz));
    }
  }
}
